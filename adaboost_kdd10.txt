adaboost CLASSIFIER KDD10


---------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd

--------------------------------------------------

df=pd.read_csv(r"C:\Users\dell\Desktop\kdd_10_percent.csv",)

--------------------------------------------------------------------

input: df.head()

output:
duration 	protocol_type1 	protocol_type2 	flag 	src_bytes 	dst_bytes 	land 	wrong_fragment 	urgent 	hot 	... 	dst_host_srv_count 	dst_host_same_srv_rate 	dst_host_diff_srv_rate 	dst_host_same_src_port_rate 	dst_host_srv_diff_host_rate 	dst_host_serror_rate 	dst_host_srv_serror_rate 	dst_host_rerror_rate 	dst_host_srv_rerror_rate 	response_class
0 	0 	tcp 	http 	SF 	239 	486 	0 	0 	0 	0 	... 	19 	1 	0 	0.05 	0.0 	0 	0 	0 	0 	normal
1 	0 	tcp 	http 	SF 	235 	1337 	0 	0 	0 	0 	... 	29 	1 	0 	0.03 	0.0 	0 	0 	0 	0 	normal
2 	0 	tcp 	http 	SF 	219 	1337 	0 	0 	0 	0 	... 	39 	1 	0 	0.03 	0.0 	0 	0 	0 	0 	normal
3 	0 	tcp 	http 	SF 	217 	2032 	0 	0 	0 	0 	... 	49 	1 	0 	0.02 	0.0 	0 	0 	0 	0 	normal
4 	0 	tcp 	http 	SF 	217 	2032 	0 	0 	0 	0 	... 	59 	1 	0 	0.02 	0.0 	0 	0 	0 	0 	normal

5 rows × 42 columns
-------------------------------------------------------------------------------------------------------------------------------------------

columns = df.columns

-------------------------------------------------------------------

len(df[columns[0]].unique())

---------------------------------------------------------------------

d = dict()
for i in columns:
    d[i]=len(df[i].unique())

------------------------------------------------------------------------

intput: d

output:
{'duration': 2495,
 'protocol_type1': 3,
 'protocol_type2': 66,
 'flag': 11,
 'src_bytes': 3300,
 'dst_bytes': 10725,
 'land': 2,
 'wrong_fragment': 3,
 'urgent': 4,
 'hot': 22,
 'num_failed_logins': 6,
 'logged_in': 2,
 'num_compromised': 23,
 'root_shell': 2,
 'su_attempted': 3,
 'num_root': 20,
 'num_file_creations': 18,
 'num_shells': 3,
 'num_access_files': 7,
 'num_outbound_cmds': 1,
 'is_host_login': 1,
 'is_guest_login': 2,
 'count': 490,
 'srv_count': 470,
 'serror_rate': 2,
 'srv_serror_rate': 2,
 'rerror_rate': 2,
 'srv_rerror_rate': 2,
 'same_srv_rate': 2,
 'diff_srv_rate': 2,
 'srv_diff_host_rate': 64,
 'dst_host_count': 256,
 'dst_host_srv_count': 256,
 'dst_host_same_srv_rate': 2,
 'dst_host_diff_srv_rate': 2,
 'dst_host_same_src_port_rate': 101,
 'dst_host_srv_diff_host_rate': 65,
 'dst_host_serror_rate': 2,
 'dst_host_srv_serror_rate': 2,
 'dst_host_rerror_rate': 2,
 'dst_host_srv_rerror_rate': 2,
 'response_class': 5}

--------------------------------------------------------------------------------------------------


df_to_train = df.iloc[:,:-1]

-------------------------------------------------

intput: df_to_train

output:
duration 	protocol_type1 	protocol_type2 	flag 	src_bytes 	dst_bytes 	land 	wrong_fragment 	urgent 	hot 	... 	dst_host_count 	dst_host_srv_count 	dst_host_same_srv_rate 	dst_host_diff_srv_rate 	dst_host_same_src_port_rate 	dst_host_srv_diff_host_rate 	dst_host_serror_rate 	dst_host_srv_serror_rate 	dst_host_rerror_rate 	dst_host_srv_rerror_rate
0 	0 	tcp 	http 	SF 	239 	486 	0 	0 	0 	0 	... 	19 	19 	1 	0 	0.05 	0.00 	0 	0 	0 	0
1 	0 	tcp 	http 	SF 	235 	1337 	0 	0 	0 	0 	... 	29 	29 	1 	0 	0.03 	0.00 	0 	0 	0 	0
2 	0 	tcp 	http 	SF 	219 	1337 	0 	0 	0 	0 	... 	39 	39 	1 	0 	0.03 	0.00 	0 	0 	0 	0
3 	0 	tcp 	http 	SF 	217 	2032 	0 	0 	0 	0 	... 	49 	49 	1 	0 	0.02 	0.00 	0 	0 	0 	0
4 	0 	tcp 	http 	SF 	217 	2032 	0 	0 	0 	0 	... 	59 	59 	1 	0 	0.02 	0.00 	0 	0 	0 	0
5 	0 	tcp 	http 	SF 	212 	1940 	0 	0 	0 	0 	... 	1 	69 	1 	0 	1.00 	0.04 	0 	0 	0 	0
6 	0 	tcp 	http 	SF 	159 	4087 	0 	0 	0 	0 	... 	11 	79 	1 	0 	0.09 	0.04 	0 	0 	0 	0
7 	0 	tcp 	http 	SF 	210 	151 	0 	0 	0 	0 	... 	8 	89 	1 	0 	0.12 	0.04 	0 	0 	0 	0
8 	0 	tcp 	http 	SF 	212 	786 	0 	0 	0 	1 	... 	8 	99 	1 	0 	0.12 	0.05 	0 	0 	0 	0
9 	0 	tcp 	http 	SF 	210 	624 	0 	0 	0 	0 	... 	18 	109 	1 	0 	0.06 	0.05 	0 	0 	0 	0
10 	0 	tcp 	http 	SF 	177 	1985 	0 	0 	0 	0 	... 	28 	119 	1 	0 	0.04 	0.04 	0 	0 	0 	0
11 	0 	tcp 	http 	SF 	222 	773 	0 	0 	0 	0 	... 	38 	129 	1 	0 	0.03 	0.04 	0 	0 	0 	0
12 	0 	tcp 	http 	SF 	256 	1169 	0 	0 	0 	0 	... 	4 	139 	1 	0 	0.25 	0.04 	0 	0 	0 	0
13 	0 	tcp 	http 	SF 	241 	259 	0 	0 	0 	0 	... 	14 	149 	1 	0 	0.07 	0.04 	0 	0 	0 	0
14 	0 	tcp 	http 	SF 	260 	1837 	0 	0 	0 	0 	... 	24 	159 	1 	0 	0.04 	0.04 	0 	0 	0 	0
15 	0 	tcp 	http 	SF 	241 	261 	0 	0 	0 	0 	... 	34 	169 	1 	0 	0.03 	0.04 	0 	0 	0 	0
16 	0 	tcp 	http 	SF 	257 	818 	0 	0 	0 	0 	... 	44 	179 	1 	0 	0.02 	0.03 	0 	0 	0 	0
17 	0 	tcp 	http 	SF 	233 	255 	0 	0 	0 	0 	... 	54 	189 	1 	0 	0.02 	0.03 	0 	0 	0 	0
18 	0 	tcp 	http 	SF 	233 	504 	0 	0 	0 	0 	... 	64 	199 	1 	0 	0.02 	0.03 	0 	0 	0 	0
19 	0 	tcp 	http 	SF 	256 	1273 	0 	0 	0 	0 	... 	74 	209 	1 	0 	0.01 	0.03 	0 	0 	0 	0
20 	0 	tcp 	http 	SF 	234 	255 	0 	0 	0 	0 	... 	84 	219 	1 	0 	0.01 	0.03 	0 	0 	0 	0
21 	0 	tcp 	http 	SF 	241 	259 	0 	0 	0 	0 	... 	94 	229 	1 	0 	0.01 	0.03 	0 	0 	0 	0
22 	0 	tcp 	http 	SF 	239 	968 	0 	0 	0 	0 	... 	3 	239 	1 	0 	0.33 	0.03 	0 	0 	0 	0
23 	0 	tcp 	http 	SF 	245 	1919 	0 	0 	0 	0 	... 	13 	249 	1 	0 	0.08 	0.03 	0 	0 	0 	0
24 	0 	tcp 	http 	SF 	248 	2129 	0 	0 	0 	0 	... 	23 	255 	1 	0 	0.04 	0.03 	0 	0 	0 	0
25 	0 	tcp 	http 	SF 	354 	1752 	0 	0 	0 	0 	... 	5 	255 	1 	0 	0.20 	0.04 	0 	0 	0 	0
26 	0 	tcp 	http 	SF 	193 	3991 	0 	0 	0 	0 	... 	1 	255 	1 	0 	1.00 	0.05 	0 	0 	0 	0
27 	0 	tcp 	http 	SF 	214 	14959 	0 	0 	0 	0 	... 	11 	255 	1 	0 	0.09 	0.05 	0 	0 	0 	0
28 	0 	tcp 	http 	SF 	212 	1309 	0 	0 	0 	0 	... 	21 	255 	1 	0 	0.05 	0.05 	0 	0 	0 	0
29 	0 	tcp 	http 	SF 	215 	3670 	0 	0 	0 	0 	... 	31 	255 	1 	0 	0.03 	0.05 	0 	0 	0 	0
... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	... 	...
493990 	0 	tcp 	http 	SF 	296 	617 	0 	0 	0 	0 	... 	24 	255 	1 	0 	0.04 	0.10 	0 	0 	0 	0
493991 	0 	tcp 	http 	SF 	294 	29288 	0 	0 	0 	0 	... 	34 	255 	1 	0 	0.03 	0.10 	0 	0 	0 	0
493992 	0 	tcp 	http 	SF 	285 	34557 	0 	0 	0 	0 	... 	7 	255 	1 	0 	0.14 	0.10 	0 	0 	0 	0
493993 	0 	tcp 	http 	SF 	316 	3665 	0 	0 	0 	0 	... 	17 	255 	1 	0 	0.06 	0.09 	0 	0 	0 	0
493994 	0 	tcp 	http 	SF 	335 	10440 	0 	0 	0 	0 	... 	27 	255 	1 	0 	0.04 	0.08 	0 	0 	0 	0
493995 	0 	tcp 	http 	SF 	284 	10592 	0 	0 	0 	0 	... 	37 	255 	1 	0 	0.03 	0.07 	0 	0 	0 	0
493996 	0 	tcp 	http 	SF 	242 	7066 	0 	0 	0 	0 	... 	47 	255 	1 	0 	0.02 	0.05 	0 	0 	0 	0
493997 	0 	tcp 	http 	SF 	223 	3707 	0 	0 	0 	0 	... 	9 	255 	1 	0 	0.11 	0.05 	0 	0 	0 	0
493998 	0 	tcp 	http 	SF 	204 	1731 	0 	0 	0 	0 	... 	19 	255 	1 	0 	0.05 	0.04 	0 	0 	0 	0
493999 	0 	tcp 	http 	SF 	148 	1122 	0 	0 	0 	0 	... 	3 	255 	1 	0 	0.33 	0.04 	0 	0 	0 	0
494000 	0 	tcp 	http 	S0 	0 	0 	0 	0 	0 	0 	... 	13 	255 	1 	0 	0.15 	0.04 	0 	0 	0 	0
494001 	0 	tcp 	http 	SF 	215 	2649 	0 	0 	0 	0 	... 	23 	255 	1 	0 	0.04 	0.04 	0 	0 	0 	0
494002 	0 	tcp 	http 	SF 	341 	326 	0 	0 	0 	0 	... 	1 	255 	1 	0 	1.00 	0.05 	0 	0 	0 	0
494003 	0 	tcp 	http 	SF 	341 	1943 	0 	0 	0 	0 	... 	11 	255 	1 	0 	0.09 	0.05 	0 	0 	0 	0
494004 	0 	tcp 	http 	SF 	341 	1663 	0 	0 	0 	0 	... 	21 	255 	1 	0 	0.05 	0.05 	0 	0 	0 	0
494005 	0 	tcp 	http 	SF 	235 	501 	0 	0 	0 	0 	... 	2 	255 	1 	0 	0.50 	0.05 	0 	0 	0 	0
494006 	0 	tcp 	http 	SF 	320 	13828 	0 	0 	0 	0 	... 	10 	255 	1 	0 	0.10 	0.05 	0 	0 	0 	0
494007 	0 	tcp 	http 	SF 	319 	1435 	0 	0 	0 	0 	... 	6 	255 	1 	0 	0.17 	0.07 	0 	0 	0 	0
494008 	0 	tcp 	http 	SF 	335 	3435 	0 	0 	0 	0 	... 	16 	255 	1 	0 	0.06 	0.07 	0 	0 	0 	0
494009 	0 	tcp 	http 	SF 	291 	236 	0 	0 	0 	0 	... 	26 	255 	1 	0 	0.04 	0.06 	0 	0 	0 	0
494010 	0 	tcp 	http 	SF 	308 	662 	0 	0 	0 	0 	... 	36 	255 	1 	0 	0.03 	0.06 	0 	0 	0 	0
494011 	0 	tcp 	http 	SF 	291 	1862 	0 	0 	0 	0 	... 	46 	255 	1 	0 	0.02 	0.05 	0 	0 	0 	0
494012 	0 	tcp 	http 	SF 	289 	244 	0 	0 	0 	0 	... 	56 	255 	1 	0 	0.02 	0.05 	0 	0 	0 	0
494013 	0 	tcp 	http 	SF 	306 	662 	0 	0 	0 	0 	... 	66 	255 	1 	0 	0.02 	0.05 	0 	0 	0 	0
494014 	0 	tcp 	http 	SF 	289 	1862 	0 	0 	0 	0 	... 	76 	255 	1 	0 	0.01 	0.05 	0 	0 	0 	0
494015 	0 	tcp 	http 	SF 	310 	1881 	0 	0 	0 	0 	... 	86 	255 	1 	0 	0.01 	0.05 	0 	0 	0 	0
494016 	0 	tcp 	http 	SF 	282 	2286 	0 	0 	0 	0 	... 	6 	255 	1 	0 	0.17 	0.05 	0 	0 	0 	0
494017 	0 	tcp 	http 	SF 	203 	1200 	0 	0 	0 	0 	... 	16 	255 	1 	0 	0.06 	0.05 	0 	0 	0 	0
494018 	0 	tcp 	http 	SF 	291 	1200 	0 	0 	0 	0 	... 	26 	255 	1 	0 	0.04 	0.05 	0 	0 	0 	0
494019 	0 	tcp 	http 	SF 	219 	1234 	0 	0 	0 	0 	... 	6 	255 	1 	0 	0.17 	0.05 	0 	0 	0 	0

494020 rows × 41 columns


------------------------------------------------------------------------------------------------------------------------------------------

df_to_test = df.iloc[:,-1]


--------------------------------------------------------

intput: df_to_test

output:
0         normal
1         normal
2         normal
3         normal
4         normal
5         normal
6         normal
7         normal
8         normal
9         normal
10        normal
11        normal
12        normal
13        normal
14        normal
15        normal
16        normal
17        normal
18        normal
19        normal
20        normal
21        normal
22        normal
23        normal
24        normal
25        normal
26        normal
27        normal
28        normal
29        normal
           ...  
493990    normal
493991    normal
493992    normal
493993    normal
493994    normal
493995    normal
493996    normal
493997    normal
493998    normal
493999    normal
494000    normal
494001    normal
494002    normal
494003    normal
494004    normal
494005    normal
494006    normal
494007    normal
494008    normal
494009    normal
494010    normal
494011    normal
494012    normal
494013    normal
494014    normal
494015    normal
494016    normal
494017    normal
494018    normal
494019    normal
Name: response_class, Length: 494020, dtype: object

-----------------------------------------------------------------------------------------------------------

from sklearn.preprocessing import LabelEncoder

---------------------------------------------------------------------------------------------------------------------

number = LabelEncoder()

---------------------------------------------------------------------------------------------------------------------

for x in range(len(df_to_test)):
    if(x=='dos'):
        d[i]==0
    if(x=='normal'):
        d[i]==1
    if(x=='probe'):
        d[i]==2
    if(x=='u2r'):
        d[i]==3
    if(x=='r2l'):
        d[i]==4

-------------------------------------------------------------------------------------------------------------------

intput: df_to_test

output:
0         normal
1         normal
2         normal
3         normal
4         normal
5         normal
6         normal
7         normal
8         normal
9         normal
10        normal
11        normal
12        normal
13        normal
14        normal
15        normal
16        normal
17        normal
18        normal
19        normal
20        normal
21        normal
22        normal
23        normal
24        normal
25        normal
26        normal
27        normal
28        normal
29        normal
           ...  
493990    normal
493991    normal
493992    normal
493993    normal
493994    normal
493995    normal
493996    normal
493997    normal
493998    normal
493999    normal
494000    normal
494001    normal
494002    normal
494003    normal
494004    normal
494005    normal
494006    normal
494007    normal
494008    normal
494009    normal
494010    normal
494011    normal
494012    normal
494013    normal
494014    normal
494015    normal
494016    normal
494017    normal
494018    normal
494019    normal
Name: response_class, Length: 494020, dtype: object
-----------------------------------------------------------------------

df_to_train['protocol_type1'] = number.fit_transform(df_to_train['protocol_type1'].astype('str'))

---------------------------------------------------------------------------------------------------


df_to_train['protocol_type2'] = number.fit_transform(df_to_train['protocol_type2'].astype('str'))

----------------------------------------------------------------------------------------------------

df_to_train['flag'] = number.fit_transform(df_to_train['flag'].astype('str'))

--------------------------------------------------------------------------------------------------------

intput: df_to_train.dtypes

output:
duration                         int64
protocol_type1                   int32
protocol_type2                   int32
flag                             int32
src_bytes                        int64
dst_bytes                        int64
land                             int64
wrong_fragment                   int64
urgent                           int64
hot                              int64
num_failed_logins                int64
logged_in                        int64
num_compromised                  int64
root_shell                       int64
su_attempted                     int64
num_root                         int64
num_file_creations               int64
num_shells                       int64
num_access_files                 int64
num_outbound_cmds                int64
is_host_login                    int64
is_guest_login                   int64
count                            int64
srv_count                        int64
serror_rate                      int64
srv_serror_rate                  int64
rerror_rate                      int64
srv_rerror_rate                  int64
same_srv_rate                    int64
diff_srv_rate                    int64
srv_diff_host_rate             float64
dst_host_count                   int64
dst_host_srv_count               int64
dst_host_same_srv_rate           int64
dst_host_diff_srv_rate           int64
dst_host_same_src_port_rate    float64
dst_host_srv_diff_host_rate    float64
dst_host_serror_rate             int64
dst_host_srv_serror_rate         int64
dst_host_rerror_rate             int64
dst_host_srv_rerror_rate         int64
dtype: object

-------------------------------------------------------------------------------------------------

from sklearn.ensemble import  AdaBoostClassifier
from sklearn import model_selection
from sklearn.model_selection import train_test_split

------------------------------------------------------------------------------------------

df_to_train_train,df_to_train_test,df_to_test_train,df_to_test_test = train_test_split(df_to_train,df_to_test,test_size = 0.2)

--------------------------------------------------------------------------------------------------------------------------------

input: df_to_train_train.shape

output:
(395216, 41)

------------------------------------------------------------------------------------------------------------

intput: df_to_train_test.shape

output:
(98804, 41)

-------------------------------------------------------------------------------------------------------

intput: df_to_test_train.shape

output:
(395216,)

--------------------------------------------------------------------------------------------------------

intput: df_to_test_test.shape

output:
(98804,)

---------------------------------------------------------------------------------------------------------------


from xgboost import XGBClassifier

---------------------------------------------------------------------------------------------------------


intput: 
abc =  AdaBoostClassifier()

abc.fit(df_to_train_train,df_to_test_train)

output:
XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bynode=1, colsample_bytree=1, gamma=0, learning_rate=0.1,
       max_delta_step=0, max_depth=3, min_child_weight=1, missing=None,
       n_estimators=100, n_jobs=1, nthread=None,
       objective='multi:softprob', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=None,
       subsample=1, verbosity=1)
--------------------------------------------------------------------------------------------------------------------

from sklearn.metrics import accuracy_score

---------------------------------------------------------------------------------------------------------------------

intput: print(accuracy_score(df_to_test_test,abc.predict(df_to_train_test)))

output: 0.9151350147767296
-------------------------------------------------------------------------------------------------------------------------

from sklearn.metrics import classification_report
from sklearn import metrics

---------------------------------------------------------------------------------------------------------------------------

y_expected = df_to_test_test

---------------------------------------------------------------------------------------------------

y_pred = abc.predict(df_to_train_test)


-----------------------------------------------------------------------------------------------------------

intput: print(metrics.classification_report(y_expected, y_pred))

output:
                precision    recall  f1-score   support

         dos       1.00      0.92      0.96     78282
      normal       0.80      0.93      0.86     19494
       probe       0.17      0.69      0.27       799
         r2l       0.02      0.11      0.04       221
         u2r       0.75      0.38      0.50         8

   micro avg       0.92      0.92      0.92     98804
   macro avg       0.55      0.61      0.52     98804
weighted avg       0.95      0.92      0.93     98804


-------------------------------------------------------------------------------------------------

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt


-------------------------------------------------------------------------------------------------------

intput:
print(metrics.confusion_matrix(y_expected, y_pred))


output:
[[71630  4114  2524    14     0]
 [    0 18206   260  1027     1]
 [    1   242   555     1     0]
 [    0   196     0    25     0]
 [    0     5     0     0     3]]
